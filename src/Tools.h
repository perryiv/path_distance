////////////////////////////////////////////////////////////////////////////////
//
//	Misc functions.
//
////////////////////////////////////////////////////////////////////////////////

#pragma once

#include <sstream>
#include <stdexcept>


////////////////////////////////////////////////////////////////////////////////
//
//	Beginning of the namespace.
//
////////////////////////////////////////////////////////////////////////////////

namespace Tools {


////////////////////////////////////////////////////////////////////////////////
//
//	Safely return an unsigned int.
//
////////////////////////////////////////////////////////////////////////////////

inline unsigned int getUint ( const char *str )
{
	if ( !str )
	{
		throw std::runtime_error ( "Invalid string when converting to unsigned int" );
	}

	int answer = std::atoi ( str );

	if ( answer < 0 )
	{
		throw std::runtime_error ( "String is invalid unsigned int" );
	}

	return static_cast < unsigned int > ( answer );
}


////////////////////////////////////////////////////////////////////////////////
//
//	Format the vectors.
//
////////////////////////////////////////////////////////////////////////////////

template < class VectorType >
inline std::string formatVec2 ( const VectorType &v, const std::string &delim = " " )
{
	std::ostringstream out;
	out << v[0] << delim << v[1];
	return out.str();
}
template < class VectorType >
inline std::string formatVec3 ( const VectorType &v, const std::string &delim = " " )
{
	std::ostringstream out;
	out << v[0] << delim << v[1] << delim << v[2];
	return out.str();
}
template < class VectorType >
inline std::string formatVec4 ( const VectorType &v, const std::string &delim = " " )
{
	std::ostringstream out;
	out << v[0] << delim << v[1] << delim << v[2] << delim << v[3];
	return out.str();
}


////////////////////////////////////////////////////////////////////////////////
//
//	End of the namespace.
//
////////////////////////////////////////////////////////////////////////////////

} // namespace Tools
